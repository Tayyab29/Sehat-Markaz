{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Text } from 'react-native-paper';\nimport Logo from \"./components/Logo\";\nimport Header from \"./components/Header\";\nimport Button from \"./components/Button\";\nimport TextInput from \"./components/TextInput\";\nimport { theme } from \"./core/theme\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { emailValidator } from \"./helpers/emailValidator\";\nimport { passwordValidator } from \"./helpers/passwordValidator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var navigation = useNavigation();\n  var otherParam = route.params.otherParam;\n\n  var onLoginPressed = function onLoginPressed() {\n    var emailError = emailValidator(email.value);\n    var passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail(_objectSpread(_objectSpread({}, email), {}, {\n        error: emailError\n      }));\n      setPassword(_objectSpread(_objectSpread({}, password), {}, {\n        error: passwordError\n      }));\n      return;\n    }\n\n    navigation.navigate('Root');\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Logo, {}), _jsx(Header, {\n      children: \"Welcome  \"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('ResetPasswordScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.forgot,\n          children: \"Forgot your password?\"\n        })\n      })\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Don\\u2019t have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate(otherParam);\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Sign up\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '85%',\n    alignSelf: 'center',\n    alignItems: 'center'\n  },\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 14\n  },\n  forgot: {\n    fontWeight: 'bold',\n    fontSize: 12,\n    color: theme.colors.primary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["C:/Users/AERO/Downloads/Compressed/fyp-esehat - Int/src/screens/Login.js"],"names":["React","useState","useEffect","Text","Logo","Header","Button","TextInput","theme","useNavigation","emailValidator","passwordValidator","LoginScreen","route","value","error","email","setEmail","password","setPassword","navigation","otherParam","params","onLoginPressed","emailError","passwordError","navigate","styles","container","text","forgotPassword","forgot","row","link","StyleSheet","create","flex","width","alignSelf","alignItems","marginBottom","flexDirection","marginTop","fontWeight","fontSize","color","colors","primary"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport { TouchableOpacity, StyleSheet, View,ScrollView } from 'react-native';\r\nimport { Text } from 'react-native-paper';\r\nimport Logo from './components/Logo';\r\nimport Header from './components/Header';\r\nimport Button from './components/Button';\r\nimport TextInput from './components/TextInput';\r\nimport { theme } from './core/theme';\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { emailValidator } from './helpers/emailValidator';\r\nimport { passwordValidator } from './helpers/passwordValidator';\r\n//import Firebase from \"./firebase\";\r\n//const auth = Firebase.auth();\r\n\r\nexport default function LoginScreen({ route }) {\r\n  const [email, setEmail] = useState({ value: '', error: '' });\r\n  const [password, setPassword] = useState({ value: '', error: '' });\r\n\r\n  const navigation = useNavigation();\r\n  const {otherParam}  = route.params;\r\n\r\n  const onLoginPressed = () => {\r\n    const emailError = emailValidator(email.value);\r\n    const passwordError = passwordValidator(password.value);\r\n\r\n\r\n    if (emailError || passwordError) {\r\n      setEmail({ ...email, error: emailError });\r\n      setPassword({ ...password, error: passwordError });\r\n      return;\r\n    }\r\n    navigation.navigate('Root');\r\n  };\r\n  // const Value = ()=> {\r\n  //   if (route.params.otherParam === 'PaReg'){\r\n  //     return 'Patient'\r\n  //   }\r\n  //   else if (route.params.otherParam === 'AmReg'){\r\n  //     return 'Patient'\r\n  //   }\r\n  //   else if (route.params.otherParam === 'PaReg'){\r\n  //     return 'Patient'\r\n  //   }\r\n  //   else if (route.params.otherParam === 'PaReg'){\r\n  //     return 'Patient'\r\n  //   }\r\n  //   else if (route.params.otherParam === 'PaReg'){\r\n  //     return 'Patient'\r\n  //   }\r\n  //   else if (route.params.otherParam === 'PaReg'){\r\n  //     return 'Patient'\r\n  //   }\r\n\r\n  // }\r\n\r\n  //   const onLoginPressed = () => {\r\n  //   try {\r\n  //     if (email != '' && password != '') {\r\n  //       auth.signInWithEmailAndPassword(email.value, password.value).\r\n  //       then(() => {navigation.navigate('Dashboard')}\r\n  //       ).catch(() => alert(\"Invalid\"))\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(error.message);\r\n  //   }\r\n  // };\r\n\r\n\r\n\r\n  return (\r\n    <View style= {styles.container}>\r\n      <Logo />\r\n      <Header>Welcome  </Header>\r\n      <TextInput\r\n        label=\"Email\"\r\n        returnKeyType=\"next\"\r\n        value={email.value}\r\n        onChangeText={(text) => setEmail({ value: text, error: '' })}\r\n        error={!!email.error}\r\n        errorText={email.error}\r\n        autoCapitalize=\"none\"\r\n        autoCompleteType=\"email\"\r\n        textContentType=\"emailAddress\"\r\n        keyboardType=\"email-address\"\r\n      />\r\n      <TextInput\r\n        label=\"Password\"\r\n        returnKeyType=\"done\"\r\n        value={password.value}\r\n        onChangeText={(text) => setPassword({ value: text, error: '' })}\r\n        error={!!password.error}\r\n        errorText={password.error}\r\n        secureTextEntry\r\n      />\r\n      <View style={styles.forgotPassword}>\r\n        <TouchableOpacity\r\n          onPress={() =>   navigation.navigate('ResetPasswordScreen')}>\r\n          <Text style={styles.forgot}>Forgot your password?</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <Button mode=\"contained\" onPress={onLoginPressed}>\r\n        Login\r\n      </Button>\r\n      <View style={styles.row}>\r\n        <Text>Don’t have an account? </Text>\r\n        <TouchableOpacity \r\n          onPress={() => navigation.navigate(otherParam)}>\r\n          <Text style={styles.link}>Sign up</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      </View>\r\n  );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    width: '85%',\r\n    alignSelf:'center',\r\n    alignItems: 'center',\r\n  },\r\n  forgotPassword: {\r\n    width: '100%',\r\n    alignItems: 'flex-end',\r\n    marginBottom: 24,\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n    marginTop: 14,\r\n  },\r\n  forgot: {\r\n    fontWeight: 'bold',\r\n    fontSize: 12,\r\n    color: theme.colors.primary,\r\n  },\r\n  link: {\r\n    fontWeight: 'bold',\r\n    color: theme.colors.primary,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}